<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Product extends Model
{
    /** @use HasFactory<\Database\Factories\ProductFactory> */
    use HasFactory;

    // Champs pouvant être mass assignable
    protected $fillable = [
        'name',
        'category_id',
        'subcategory_id',
        'brand_id',
        'supplier_id',
        'description',
        'unit_type',
        'type',
        'image_path',
        'code',
        'current_purchase_cost',
        'current_sale_price',
        'current_wholesale_price',
        'available_quantity',
        'discount_type',
        'discount',
        'is_popular',
        'is_trending',
        'status'
    ];
    
    // Les relations du modèle
    public function category()
    {
        return $this->belongsTo(ProductCategory::class, 'category_id');
    }

    public function subcategory()
    {
        return $this->belongsTo(ProductSubCategory::class, 'subcategory_id');
    }

    public function brand()
    {
        return $this->belongsTo(Brand::class, 'brand_id');
    }

    public function supplier()
    {
        return $this->belongsTo(Supplier::class, 'supplier_id');
    }

    /**
     * Un produit peut avoir plusieurs variantes.
     */
    public function variants()
    {
        return $this->hasMany(ProductVariant::class);
    }

    /**
     * Un produit peut avoir plusieurs images.
     */
    public function images()
    {
        return $this->hasMany(ProductImage::class);
    }
    
    public function attributes()
    {
        return $this->hasMany(ProductAttribute::class);
    }

    /**
     * Récupère les couleurs disponibles pour ce produit via les variantes.
     */
    public function colors()
    {
        return $this->belongsToMany(ProductColor::class, 'product_variants', 'product_id', 'color_id')
                    ->distinct();
    }

    /**
     * Récupère les tailles disponibles pour ce produit via les variantes.
     */
    public function sizes()
    {
        return $this->belongsToMany(ProductSize::class, 'product_variants', 'product_id', 'size_id')
                    ->distinct();
    }

    /**
     * Accesseur pour l'attribut image - retourne l'image_path ou une image par défaut.
     */
    public function getImageAttribute()
    {
        if ($this->image_path) {
            // Si l'image_path commence par 'http', c'est une URL complète
            if (str_starts_with($this->image_path, 'http')) {
                return $this->image_path;
            }
            // Sinon, on construit l'URL complète
            return asset($this->image_path);
        }
        
        // Retourne l'image par défaut
        return asset('images/placeholder.jpg');
    }

    /**
     * Un produit peut être dans plusieurs wishlists.
     */
    public function wishlists()
    {
        return $this->hasMany(Wishlist::class);
    }

    /**
     * Un produit peut avoir plusieurs avis.
     */
    public function reviews()
    {
        return $this->hasMany(ProductReview::class);
    }

    /**
     * Récupère les avis approuvés uniquement.
     */
    public function approvedReviews()
    {
        return $this->hasMany(ProductReview::class)->where('is_approved', true);
    }

    /**
     * Calcule la note moyenne du produit.
     */
    public function getAverageRatingAttribute()
    {
        return $this->approvedReviews()->avg('rating') ?? 0;
    }

    /**
     * Compte le nombre total d'avis approuvés.
     */
    public function getReviewsCountAttribute()
    {
        return $this->approvedReviews()->count();
    }

    /**
     * Vérifie si un produit est dans la wishlist d'un utilisateur.
     */
    public function isInWishlist($userId = null)
    {
        if (!$userId) {
            return false;
        }
        
        return $this->wishlists()->where('user_id', $userId)->exists();
    }

    /**
     * Scope utilitaire pour charger les variantes et leurs relations (color/size/images).
     */
    public function scopeWithVariants($query)
    {
        return $query->with([
            'variants.color',
            'variants.size',
            'variants.images',
        ]);
    }

    /**
     * Calcule la plage de prix (min, max) à partir des variantes.
     * Fallback: attributs.price puis current_sale_price du produit.
     * Retourne un tableau ['min' => float, 'max' => float].
     */
    public function getPriceRangeAttribute(): array
    {
        $variantPrices = $this->variants()
            ->whereNotNull('sale_price')
            ->pluck('sale_price')
            ->filter(fn($v) => $v !== null && $v !== '' && $v >= 0)
            ->map(fn($v) => (float) $v)
            ->all();

        $min = null;
        $max = null;

        if (!empty($variantPrices)) {
            $min = min($variantPrices);
            $max = max($variantPrices);
        } else {
            if (method_exists($this, 'attributes')) {
                $attrMin = $this->attributes()->min('price');
                $attrMax = $this->attributes()->max('price');
                if (!is_null($attrMin) && !is_null($attrMax)) {
                    $min = (float) $attrMin;
                    $max = (float) $attrMax;
                }
            }

            if (is_null($min) || is_null($max)) {
                $price = (float) ($this->current_sale_price ?? 0);
                $min = $min ?? $price;
                $max = $max ?? $price;
            }
        }

        return [
            'min' => (float) $min,
            'max' => (float) $max,
        ];
    }

    /**
     * Accesseur pour les propriétés calculées.
     */
    protected $appends = ['image', 'average_rating', 'reviews_count'];
}

